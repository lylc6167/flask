1.构建文件顺序为config.py > main.py > models.py > manage.py
2.上述文件在学习前期可理解为django中的数据库设置》view》models》manage.py
3.models.py中的类表，需要加上def __init__ 和 def __repr__ 前者初始化这个表，后者用于
    shell中查看
4.flask不像django有傻瓜式的启动配置，所有的东西包括命令行都需要手动加载，所以在进行
    one to many, many to many等数据库关系之前，建议先安装好flask-migrate
    在manage.py中，定义如下：
                    import main
                    import models

                    manager = Manager(main.app)
                    migrate = Migrate(main.app, models.db)

                    manager.add_command("server", Server())
                    manager.add_command("db", MigrateCommand)

                    .....如有需要，还需单独定义shell中的具体用法

    在此之前，数据库是通过
                    db.create_all()
    创建的，而且每次更新数据库字段都需要删除之前的记录而且无法保存原有数据。
    在此之后，数据库更新通过类似于django中的makemigration代码：
                    python manage.py db init
                    python manage.py db migrate
                    python manage.py db upgrade
    并在数据库中产生alembic_version表保存更新记录，类似于django中的migrate表,
    且当更新出现错误时，可以一样删除
5.对于ForeignKey关系，主表中有个副表字段：
                    class A():
                        id = .....
                        bs = db.relationship(
                            'B',
                            backref='as'
                            lazy='dynamic')
    副表有个主表id：
                    class B():
                        a_id = db.Column(
                            db.Integer, #  此处可用db.String(45)
                            db.ForeignKey('as.id'))
6.对于Many to Many关系
7.
8.
9.